/*
Euler 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, 
the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the 
even-valued terms.
*/

/*
every third number in the fibonacci sequence is even
*/


#include <iostream>
#include <vector>

using namespace std;

void fibbonaci (int n, vector<int>& fib);

int main() 
{
	vector<int> fib = {1, 2};
	int sumofevenfib = 0;

	while (fib.back() < 4000000)
	{
		sumofevenfib += fib.back();
		// increase fib size with 3, so the last added fib number is even.
		fibbonaci(fib.size()+3, fib);

	}
	cout << sumofevenfib << endl;
}

void fibbonaci (int n, vector<int>& fib)
{
	int fib1;
	int fib2;
	if (fib.size() < n)
	{
		for (int i = fib.size(); i < n; i++)
		{
			fib1 = fib.back();
			fib2 = fib[fib.size()-2];
			// cout << fib1 << ' ' << fib2 << ' ' << fib1 + fib2 << endl;
			fib.emplace_back(fib1 + fib2);
		}
	}
}
